// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

// @formatter:off

#![allow(dead_code)]

use std::ptr;

use wasmlib::*;

use crate::consts::*;
use crate::params::*;
use crate::results::*;

pub struct InitCall {
    pub func:   ScInitFunc,
    pub params: MutableInitParams,
}

pub struct IssuerConfirmResultCall {
    pub func:   ScFunc,
    pub params: MutableIssuerConfirmResultParams,
}

pub struct IssuerRejectResultCall {
    pub func:   ScFunc,
    pub params: MutableIssuerRejectResultParams,
}

pub struct IssuerRequestTaskCall {
    pub func:   ScFunc,
    pub params: MutableIssuerRequestTaskParams,
}

pub struct MachineFinnishTaskCall {
    pub func:   ScFunc,
    pub params: MutableMachineFinnishTaskParams,
}

pub struct MachineQuitTaskCall {
    pub func:   ScFunc,
    pub params: MutableMachineQuitTaskParams,
}

pub struct MachineResponseCall {
    pub func:   ScFunc,
    pub params: MutableMachineResponseParams,
}

pub struct GetOwnerCall {
    pub func:    ScView,
    pub results: ImmutableGetOwnerResults,
}

pub struct GetTaskCall {
    pub func:    ScView,
    pub params:  MutableGetTaskParams,
    pub results: ImmutableGetTaskResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    pub fn init(_ctx: & dyn ScFuncCallContext) -> InitCall {
        let mut f = InitCall {
            func:   ScInitFunc::new(HSC_NAME, HFUNC_INIT),
            params: MutableInitParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn issuer_confirm_result(_ctx: & dyn ScFuncCallContext) -> IssuerConfirmResultCall {
        let mut f = IssuerConfirmResultCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_ISSUER_CONFIRM_RESULT),
            params: MutableIssuerConfirmResultParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn issuer_reject_result(_ctx: & dyn ScFuncCallContext) -> IssuerRejectResultCall {
        let mut f = IssuerRejectResultCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_ISSUER_REJECT_RESULT),
            params: MutableIssuerRejectResultParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn issuer_request_task(_ctx: & dyn ScFuncCallContext) -> IssuerRequestTaskCall {
        let mut f = IssuerRequestTaskCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_ISSUER_REQUEST_TASK),
            params: MutableIssuerRequestTaskParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn machine_finnish_task(_ctx: & dyn ScFuncCallContext) -> MachineFinnishTaskCall {
        let mut f = MachineFinnishTaskCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_MACHINE_FINNISH_TASK),
            params: MutableMachineFinnishTaskParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn machine_quit_task(_ctx: & dyn ScFuncCallContext) -> MachineQuitTaskCall {
        let mut f = MachineQuitTaskCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_MACHINE_QUIT_TASK),
            params: MutableMachineQuitTaskParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn machine_response(_ctx: & dyn ScFuncCallContext) -> MachineResponseCall {
        let mut f = MachineResponseCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_MACHINE_RESPONSE),
            params: MutableMachineResponseParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn get_owner(_ctx: & dyn ScViewCallContext) -> GetOwnerCall {
        let mut f = GetOwnerCall {
            func:    ScView::new(HSC_NAME, HVIEW_GET_OWNER),
            results: ImmutableGetOwnerResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }
    pub fn get_task(_ctx: & dyn ScViewCallContext) -> GetTaskCall {
        let mut f = GetTaskCall {
            func:    ScView::new(HSC_NAME, HVIEW_GET_TASK),
            params:  MutableGetTaskParams { id: 0 },
            results: ImmutableGetTaskResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }
}

// @formatter:on
