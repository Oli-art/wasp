// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

// @formatter:off

#![allow(dead_code)]

use std::ptr;

use wasmlib::*;

use crate::consts::*;
use crate::params::*;
use crate::results::*;

pub struct InitCall {
    pub func:   ScInitFunc,
    pub params: MutableInitParams,
}

pub struct MachineFinnishTaskCall {
    pub func:   ScFunc,
    pub params: MutableMachineFinnishTaskParams,
}

pub struct MachineResponseCall {
    pub func:   ScFunc,
    pub params: MutableMachineResponseParams,
}

pub struct RequestMachineCall {
    pub func:   ScFunc,
    pub params: MutableRequestMachineParams,
}

pub struct GetOwnerCall {
    pub func:    ScView,
    pub results: ImmutableGetOwnerResults,
}

pub struct GetTasksCall {
    pub func:    ScView,
    pub params:  MutableGetTasksParams,
    pub results: ImmutableGetTasksResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    pub fn init(_ctx: & dyn ScFuncCallContext) -> InitCall {
        let mut f = InitCall {
            func:   ScInitFunc::new(HSC_NAME, HFUNC_INIT),
            params: MutableInitParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn machine_finnish_task(_ctx: & dyn ScFuncCallContext) -> MachineFinnishTaskCall {
        let mut f = MachineFinnishTaskCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_MACHINE_FINNISH_TASK),
            params: MutableMachineFinnishTaskParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn machine_response(_ctx: & dyn ScFuncCallContext) -> MachineResponseCall {
        let mut f = MachineResponseCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_MACHINE_RESPONSE),
            params: MutableMachineResponseParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn request_machine(_ctx: & dyn ScFuncCallContext) -> RequestMachineCall {
        let mut f = RequestMachineCall {
            func:   ScFunc::new(HSC_NAME, HFUNC_REQUEST_MACHINE),
            params: MutableRequestMachineParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }
    pub fn get_owner(_ctx: & dyn ScViewCallContext) -> GetOwnerCall {
        let mut f = GetOwnerCall {
            func:    ScView::new(HSC_NAME, HVIEW_GET_OWNER),
            results: ImmutableGetOwnerResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }
    pub fn get_tasks(_ctx: & dyn ScViewCallContext) -> GetTasksCall {
        let mut f = GetTasksCall {
            func:    ScView::new(HSC_NAME, HVIEW_GET_TASKS),
            params:  MutableGetTasksParams { id: 0 },
            results: ImmutableGetTasksResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }
}

// @formatter:on
