// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

// @formatter:off

#![allow(dead_code)]

use wasmlib::*;
use wasmlib::host::*;

pub struct Task {
    pub amount:      i64,       // amount in iotas beign offered for task
    pub instruction: String,    // task to be done
    pub issuer:      ScAgentID, // agent calling the machine
    pub machine_id:  ScAgentID, // machinhe that is beign called
    pub status:      String,    // status of the task. Can be: requested, approved, rejected, waiting or completed
}

impl Task {
    pub fn from_bytes(bytes: &[u8]) -> Task {
        let mut decode = BytesDecoder::new(bytes);
        Task {
            amount: decode.int64(),
            instruction: decode.string(),
            issuer: decode.agent_id(),
            machine_id: decode.agent_id(),
            status: decode.string(),
        }
    }

    pub fn to_bytes(&self) -> Vec<u8> {
        let mut encode = BytesEncoder::new();
        encode.int64(self.amount);
        encode.string(&self.instruction);
        encode.agent_id(&self.issuer);
        encode.agent_id(&self.machine_id);
        encode.string(&self.status);
        return encode.data();
    }
}

pub struct ImmutableTask {
    pub(crate) obj_id: i32,
    pub(crate) key_id: Key32,
}

impl ImmutableTask {
    pub fn exists(&self) -> bool {
        exists(self.obj_id, self.key_id, TYPE_BYTES)
    }

    pub fn value(&self) -> Task {
        Task::from_bytes(&get_bytes(self.obj_id, self.key_id, TYPE_BYTES))
    }
}

pub struct MutableTask {
    pub(crate) obj_id: i32,
    pub(crate) key_id: Key32,
}

impl MutableTask {
    pub fn exists(&self) -> bool {
        exists(self.obj_id, self.key_id, TYPE_BYTES)
    }

    pub fn set_value(&self, value: &Task) {
        set_bytes(self.obj_id, self.key_id, TYPE_BYTES, &value.to_bytes());
    }

    pub fn value(&self) -> Task {
        Task::from_bytes(&get_bytes(self.obj_id, self.key_id, TYPE_BYTES))
    }
}

// @formatter:on
