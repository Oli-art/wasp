// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

// @formatter:off

#![allow(dead_code)]

#![allow(unused_imports)]

use test::*;
use wasmlib::*;
use wasmlib::host::*;

use crate::consts::*;
use crate::keys::*;
use crate::params::*;
use crate::results::*;
use crate::state::*;

mod consts;
mod contract;
mod keys;
mod params;
mod results;
mod state;
mod types;
mod test;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_ADD_TEST_STRUCT, func_add_test_struct_thunk);
    exports.add_func(FUNC_CLEAR_ALL, func_clear_all_thunk);

    unsafe {
        for i in 0..KEY_MAP_LEN {
            IDX_MAP[i] = get_key_id_from_string(KEY_MAP[i]);
        }
    }
}

pub struct AddTestStructContext {
    params: ImmutableAddTestStructParams,
    state:  MutabletestState,
}

fn func_add_test_struct_thunk(ctx: &ScFuncContext) {
    ctx.log("test.funcAddTestStruct");
    let f = AddTestStructContext {
        params: ImmutableAddTestStructParams {
            id: OBJ_ID_PARAMS,
        },
        state: MutabletestState {
            id: OBJ_ID_STATE,
        },
    };
    ctx.require(f.params.description().exists(), "missing mandatory description");
    func_add_test_struct(ctx, &f);
    ctx.log("test.funcAddTestStruct ok");
}

pub struct ClearAllContext {
    state: MutabletestState,
}

fn func_clear_all_thunk(ctx: &ScFuncContext) {
    ctx.log("test.funcClearAll");
    let f = ClearAllContext {
        state: MutabletestState {
            id: OBJ_ID_STATE,
        },
    };
    func_clear_all(ctx, &f);
    ctx.log("test.funcClearAll ok");
}

// @formatter:on
