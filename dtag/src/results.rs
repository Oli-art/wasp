// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;
use crate::types::*;

#[derive(Clone, Copy)]
pub struct ImmutableRequestPlayResults {
    pub(crate) id: i32,
}

impl ImmutableRequestPlayResults {
    pub fn image_id(&self) -> ScImmutableInt32 {
        ScImmutableInt32::new(self.id, idx_map(IDX_RESULT_IMAGE_ID))
    }
}

#[derive(Clone, Copy)]
pub struct MutableRequestPlayResults {
    pub(crate) id: i32,
}

impl MutableRequestPlayResults {
    pub fn image_id(&self) -> ScMutableInt32 {
        ScMutableInt32::new(self.id, idx_map(IDX_RESULT_IMAGE_ID))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableGetPlaysPerImageResults {
    pub(crate) id: i32,
}

impl ImmutableGetPlaysPerImageResults {
    pub fn plays_per_image(&self) -> ScImmutableInt32 {
        ScImmutableInt32::new(self.id, idx_map(IDX_RESULT_PLAYS_PER_IMAGE))
    }
}

#[derive(Clone, Copy)]
pub struct MutableGetPlaysPerImageResults {
    pub(crate) id: i32,
}

impl MutableGetPlaysPerImageResults {
    pub fn plays_per_image(&self) -> ScMutableInt32 {
        ScMutableInt32::new(self.id, idx_map(IDX_RESULT_PLAYS_PER_IMAGE))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableGetResultsResults {
    pub(crate) id: i32,
}

impl ImmutableGetResultsResults {
    pub fn h(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_H))
    }

    pub fn w(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_W))
    }

    pub fn x(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_X))
    }

    pub fn y(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_RESULT_Y))
    }
}

#[derive(Clone, Copy)]
pub struct MutableGetResultsResults {
    pub(crate) id: i32,
}

impl MutableGetResultsResults {
    pub fn h(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_H))
    }

    pub fn w(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_W))
    }

    pub fn x(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_X))
    }

    pub fn y(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_RESULT_Y))
    }
}
