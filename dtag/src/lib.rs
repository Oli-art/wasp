// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

// @formatter:off

#![allow(dead_code)]

#![allow(unused_imports)]

use dtag::*;
use wasmlib::*;
use wasmlib::host::*;

use crate::consts::*;
use crate::keys::*;
use crate::params::*;
use crate::results::*;
use crate::state::*;

mod consts;
mod contract;
mod keys;
mod params;
mod results;
mod state;
mod types;
mod dtag;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_CREATE_ROUND, func_create_round_thunk);
    exports.add_func(FUNC_END_ROUND, func_end_round_thunk);
    exports.add_func(FUNC_REQUEST_PLAY, func_request_play_thunk);
    exports.add_func(FUNC_SEND_TAGS, func_send_tags_thunk);
    exports.add_view(VIEW_GET_PLAYS_PER_IMAGE, view_get_plays_per_image_thunk);
    exports.add_view(VIEW_GET_RESULTS, view_get_results_thunk);

    unsafe {
        for i in 0..KEY_MAP_LEN {
            IDX_MAP[i] = get_key_id_from_string(KEY_MAP[i]);
        }
    }
}

pub struct CreateRoundContext {
    params: ImmutableCreateRoundParams,
    state:  MutabledtagState,
}

fn func_create_round_thunk(ctx: &ScFuncContext) {
    ctx.log("dtag.funcCreateRound");
    let f = CreateRoundContext {
        params: ImmutableCreateRoundParams {
            id: OBJ_ID_PARAMS,
        },
        state: MutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    ctx.require(f.params.description().exists(), "missing mandatory description");
    ctx.require(f.params.number_of_images().exists(), "missing mandatory numberOfImages");
    func_create_round(ctx, &f);
    ctx.log("dtag.funcCreateRound ok");
}

pub struct EndRoundContext {
    state: MutabledtagState,
}

fn func_end_round_thunk(ctx: &ScFuncContext) {
    ctx.log("dtag.funcEndRound");
    let f = EndRoundContext {
        state: MutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    func_end_round(ctx, &f);
    ctx.log("dtag.funcEndRound ok");
}

pub struct RequestPlayContext {
    results: MutableRequestPlayResults,
    state:   MutabledtagState,
}

fn func_request_play_thunk(ctx: &ScFuncContext) {
    ctx.log("dtag.funcRequestPlay");
    let f = RequestPlayContext {
        results: MutableRequestPlayResults {
            id: OBJ_ID_RESULTS,
        },
        state: MutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    func_request_play(ctx, &f);
    ctx.log("dtag.funcRequestPlay ok");
}

pub struct SendTagsContext {
    params: ImmutableSendTagsParams,
    state:  MutabledtagState,
}

fn func_send_tags_thunk(ctx: &ScFuncContext) {
    ctx.log("dtag.funcSendTags");
    let f = SendTagsContext {
        params: ImmutableSendTagsParams {
            id: OBJ_ID_PARAMS,
        },
        state: MutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    ctx.require(f.params.h().exists(), "missing mandatory h");
    ctx.require(f.params.w().exists(), "missing mandatory w");
    ctx.require(f.params.x().exists(), "missing mandatory x");
    ctx.require(f.params.y().exists(), "missing mandatory y");
    func_send_tags(ctx, &f);
    ctx.log("dtag.funcSendTags ok");
}

pub struct GetPlaysPerImageContext {
    params:  ImmutableGetPlaysPerImageParams,
    results: MutableGetPlaysPerImageResults,
    state:   ImmutabledtagState,
}

fn view_get_plays_per_image_thunk(ctx: &ScViewContext) {
    ctx.log("dtag.viewGetPlaysPerImage");
    let f = GetPlaysPerImageContext {
        params: ImmutableGetPlaysPerImageParams {
            id: OBJ_ID_PARAMS,
        },
        results: MutableGetPlaysPerImageResults {
            id: OBJ_ID_RESULTS,
        },
        state: ImmutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    ctx.require(f.params.image_id().exists(), "missing mandatory imageId");
    view_get_plays_per_image(ctx, &f);
    ctx.log("dtag.viewGetPlaysPerImage ok");
}

pub struct GetResultsContext {
    params:  ImmutableGetResultsParams,
    results: MutableGetResultsResults,
    state:   ImmutabledtagState,
}

fn view_get_results_thunk(ctx: &ScViewContext) {
    ctx.log("dtag.viewGetResults");
    let f = GetResultsContext {
        params: ImmutableGetResultsParams {
            id: OBJ_ID_PARAMS,
        },
        results: MutableGetResultsResults {
            id: OBJ_ID_RESULTS,
        },
        state: ImmutabledtagState {
            id: OBJ_ID_STATE,
        },
    };
    ctx.require(f.params.image_id().exists(), "missing mandatory imageId");
    view_get_results(ctx, &f);
    ctx.log("dtag.viewGetResults ok");
}

// @formatter:on
